
Labo4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b88  08000b90  00010b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000b88  08000b88  00010b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000b8c  08000b8c  00010b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010b90  2**0
                  CONTENTS
  7 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000020  20000020  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010b90  2**0
                  CONTENTS, READONLY
 10 .debug_info   000011ec  00000000  00000000  00010bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000425  00000000  00000000  00011dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000130  00000000  00000000  000121d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e8  00000000  00000000  00012308  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000a79  00000000  00000000  000123f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000632  00000000  00000000  00012e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001349b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000031c  00000000  00000000  00013518  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00013834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b70 	.word	0x08000b70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000b70 	.word	0x08000b70

080001c8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b0e6      	sub	sp, #408	; 0x198
 80001cc:	af00      	add	r7, sp, #0
  int i = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  */

  /* TODO - Add your application code here */


  ConfigureGPIO();
 80001d4:	f000 f958 	bl	8000488 <ConfigureGPIO>
  ConfigureSPI1();
 80001d8:	f000 f996 	bl	8000508 <ConfigureSPI1>
  unsigned char p_erase[TAILLE];
  unsigned char p_recv[TAILLE];
  unsigned char p_recv2[TAILLE];
  unsigned char p_recv3[TAILLE];

  for(int iter = 0; iter < TAILLE; iter++)
 80001dc:	2300      	movs	r3, #0
 80001de:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80001e2:	e02b      	b.n	800023c <main+0x74>
  {
	  p_mots[iter] = 'i' + iter;
 80001e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	3369      	adds	r3, #105	; 0x69
 80001ec:	b2d9      	uxtb	r1, r3
 80001ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80001f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80001f6:	4413      	add	r3, r2
 80001f8:	460a      	mov	r2, r1
 80001fa:	701a      	strb	r2, [r3, #0]
	  p_erase[iter] = 0xff;
 80001fc:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000200:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000204:	4413      	add	r3, r2
 8000206:	22ff      	movs	r2, #255	; 0xff
 8000208:	701a      	strb	r2, [r3, #0]
	  p_recv[iter] = 0;
 800020a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800020e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000212:	4413      	add	r3, r2
 8000214:	2200      	movs	r2, #0
 8000216:	701a      	strb	r2, [r3, #0]
	  p_recv2[iter] =  0;
 8000218:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800021c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000220:	4413      	add	r3, r2
 8000222:	2200      	movs	r2, #0
 8000224:	701a      	strb	r2, [r3, #0]
	  p_recv3[iter] =  0;
 8000226:	463a      	mov	r2, r7
 8000228:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800022c:	4413      	add	r3, r2
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
  for(int iter = 0; iter < TAILLE; iter++)
 8000232:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000236:	3301      	adds	r3, #1
 8000238:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800023c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000240:	2b42      	cmp	r3, #66	; 0x42
 8000242:	ddcf      	ble.n	80001e4 <main+0x1c>
  }

  // ecrire et lire
  int nb_iter = 2;
 8000244:	2302      	movs	r3, #2
 8000246:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  for (int j = 0; j < nb_iter; j++){
 800024a:	2300      	movs	r3, #0
 800024c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8000250:	e07e      	b.n	8000350 <main+0x188>
	  unsigned int sr = 1;
 8000252:	2301      	movs	r3, #1
 8000254:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  while (sr % 2 == 1){
 8000258:	e02f      	b.n	80002ba <main+0xf2>
		  GPIOD->ODR &= ~BIT7;
 800025a:	4a89      	ldr	r2, [pc, #548]	; (8000480 <main+0x2b8>)
 800025c:	4b88      	ldr	r3, [pc, #544]	; (8000480 <main+0x2b8>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000264:	6153      	str	r3, [r2, #20]
		  SendCommand(WREN);
 8000266:	2006      	movs	r0, #6
 8000268:	f000 fae8 	bl	800083c <SendCommand>
		  for(int delay2 = 0; delay2 < 18; delay2++){};
 800026c:	2300      	movs	r3, #0
 800026e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000272:	e004      	b.n	800027e <main+0xb6>
 8000274:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000278:	3301      	adds	r3, #1
 800027a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800027e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000282:	2b11      	cmp	r3, #17
 8000284:	ddf6      	ble.n	8000274 <main+0xac>
		  GPIOD->ODR |= BIT7;
 8000286:	4a7e      	ldr	r2, [pc, #504]	; (8000480 <main+0x2b8>)
 8000288:	4b7d      	ldr	r3, [pc, #500]	; (8000480 <main+0x2b8>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000290:	6153      	str	r3, [r2, #20]
		  sr =  ReadMemSR(p_recv2);
 8000292:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000296:	4618      	mov	r0, r3
 8000298:	f000 faea 	bl	8000870 <ReadMemSR>
 800029c:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
		  for(int delay3 = 0; delay3 < 10; delay3++){};
 80002a0:	2300      	movs	r3, #0
 80002a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80002a6:	e004      	b.n	80002b2 <main+0xea>
 80002a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80002ac:	3301      	adds	r3, #1
 80002ae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80002b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80002b6:	2b09      	cmp	r3, #9
 80002b8:	ddf6      	ble.n	80002a8 <main+0xe0>
	  while (sr % 2 == 1){
 80002ba:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d1c9      	bne.n	800025a <main+0x92>
		}
	  for(int delay3 = 0; delay3 < 50; delay3++){};
 80002c6:	2300      	movs	r3, #0
 80002c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80002cc:	e004      	b.n	80002d8 <main+0x110>
 80002ce:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80002d2:	3301      	adds	r3, #1
 80002d4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80002d8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80002dc:	2b31      	cmp	r3, #49	; 0x31
 80002de:	ddf6      	ble.n	80002ce <main+0x106>
	  LireMemoireEEPROM(pageOffset, TAILLE, p_recv);
 80002e0:	4b68      	ldr	r3, [pc, #416]	; (8000484 <main+0x2bc>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80002e8:	2143      	movs	r1, #67	; 0x43
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f96e 	bl	80005cc <LireMemoireEEPROM>
	  for(int delay3 = 0; delay3 < 50; delay3++){};
 80002f0:	2300      	movs	r3, #0
 80002f2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80002f6:	e004      	b.n	8000302 <main+0x13a>
 80002f8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80002fc:	3301      	adds	r3, #1
 80002fe:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000302:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000306:	2b31      	cmp	r3, #49	; 0x31
 8000308:	ddf6      	ble.n	80002f8 <main+0x130>
	  EcrireMemoireEEPROM(pageOffset, TAILLE, p_mots);
 800030a:	4b5e      	ldr	r3, [pc, #376]	; (8000484 <main+0x2bc>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000312:	2143      	movs	r1, #67	; 0x43
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f9cd 	bl	80006b4 <EcrireMemoireEEPROM>
	  for(int delay = 0; delay < 50; delay++){};
 800031a:	2300      	movs	r3, #0
 800031c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8000320:	e004      	b.n	800032c <main+0x164>
 8000322:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000326:	3301      	adds	r3, #1
 8000328:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800032c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000330:	2b31      	cmp	r3, #49	; 0x31
 8000332:	ddf6      	ble.n	8000322 <main+0x15a>
	  LireMemoireEEPROM(pageOffset - TAILLE, TAILLE, p_recv);
 8000334:	4b53      	ldr	r3, [pc, #332]	; (8000484 <main+0x2bc>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3b43      	subs	r3, #67	; 0x43
 800033a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800033e:	2143      	movs	r1, #67	; 0x43
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f943 	bl	80005cc <LireMemoireEEPROM>
  for (int j = 0; j < nb_iter; j++){
 8000346:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800034a:	3301      	adds	r3, #1
 800034c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8000350:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000354:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000358:	429a      	cmp	r2, r3
 800035a:	f6ff af7a 	blt.w	8000252 <main+0x8a>
  }
  pageOffset = 0;
 800035e:	4b49      	ldr	r3, [pc, #292]	; (8000484 <main+0x2bc>)
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]

  // erase
	for (int j = 0; j < nb_iter; j++){
 8000364:	2300      	movs	r3, #0
 8000366:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800036a:	e07c      	b.n	8000466 <main+0x29e>
		unsigned int sr = 1;
 800036c:	2301      	movs	r3, #1
 800036e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		while (sr % 2 == 1){
 8000372:	e02f      	b.n	80003d4 <main+0x20c>
		  GPIOD->ODR &= ~BIT7;
 8000374:	4a42      	ldr	r2, [pc, #264]	; (8000480 <main+0x2b8>)
 8000376:	4b42      	ldr	r3, [pc, #264]	; (8000480 <main+0x2b8>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800037e:	6153      	str	r3, [r2, #20]
		  SendCommand(WREN);
 8000380:	2006      	movs	r0, #6
 8000382:	f000 fa5b 	bl	800083c <SendCommand>
		  for(int delay2 = 0; delay2 < 18; delay2++){};
 8000386:	2300      	movs	r3, #0
 8000388:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800038c:	e004      	b.n	8000398 <main+0x1d0>
 800038e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000392:	3301      	adds	r3, #1
 8000394:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8000398:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800039c:	2b11      	cmp	r3, #17
 800039e:	ddf6      	ble.n	800038e <main+0x1c6>
		  GPIOD->ODR |= BIT7;
 80003a0:	4a37      	ldr	r2, [pc, #220]	; (8000480 <main+0x2b8>)
 80003a2:	4b37      	ldr	r3, [pc, #220]	; (8000480 <main+0x2b8>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003aa:	6153      	str	r3, [r2, #20]
		  sr =  ReadMemSR(p_recv2);
 80003ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fa5d 	bl	8000870 <ReadMemSR>
 80003b6:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
		  for(int delay3 = 0; delay3 < 10; delay3++){};
 80003ba:	2300      	movs	r3, #0
 80003bc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80003c0:	e004      	b.n	80003cc <main+0x204>
 80003c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80003c6:	3301      	adds	r3, #1
 80003c8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80003cc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80003d0:	2b09      	cmp	r3, #9
 80003d2:	ddf6      	ble.n	80003c2 <main+0x1fa>
		while (sr % 2 == 1){
 80003d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80003d8:	f003 0301 	and.w	r3, r3, #1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d1c9      	bne.n	8000374 <main+0x1ac>
		}
	  for(int delay3 = 0; delay3 < 50; delay3++){};
 80003e0:	2300      	movs	r3, #0
 80003e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80003e6:	e004      	b.n	80003f2 <main+0x22a>
 80003e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80003ec:	3301      	adds	r3, #1
 80003ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80003f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80003f6:	2b31      	cmp	r3, #49	; 0x31
 80003f8:	ddf6      	ble.n	80003e8 <main+0x220>
	  LireMemoireEEPROM(pageOffset, TAILLE, p_recv3);
 80003fa:	4b22      	ldr	r3, [pc, #136]	; (8000484 <main+0x2bc>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	463a      	mov	r2, r7
 8000400:	2143      	movs	r1, #67	; 0x43
 8000402:	4618      	mov	r0, r3
 8000404:	f000 f8e2 	bl	80005cc <LireMemoireEEPROM>
	  for(int delay3 = 0; delay3 < 50; delay3++){};
 8000408:	2300      	movs	r3, #0
 800040a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800040e:	e004      	b.n	800041a <main+0x252>
 8000410:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000414:	3301      	adds	r3, #1
 8000416:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800041a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800041e:	2b31      	cmp	r3, #49	; 0x31
 8000420:	ddf6      	ble.n	8000410 <main+0x248>
	  EcrireMemoireEEPROM(pageOffset, TAILLE, p_erase);
 8000422:	4b18      	ldr	r3, [pc, #96]	; (8000484 <main+0x2bc>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800042a:	2143      	movs	r1, #67	; 0x43
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f941 	bl	80006b4 <EcrireMemoireEEPROM>
	  for(int delay = 0; delay < 50; delay++){};
 8000432:	2300      	movs	r3, #0
 8000434:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000438:	e004      	b.n	8000444 <main+0x27c>
 800043a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800043e:	3301      	adds	r3, #1
 8000440:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000444:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000448:	2b31      	cmp	r3, #49	; 0x31
 800044a:	ddf6      	ble.n	800043a <main+0x272>
	  LireMemoireEEPROM(pageOffset - TAILLE, TAILLE, p_recv3);
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <main+0x2bc>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3b43      	subs	r3, #67	; 0x43
 8000452:	463a      	mov	r2, r7
 8000454:	2143      	movs	r1, #67	; 0x43
 8000456:	4618      	mov	r0, r3
 8000458:	f000 f8b8 	bl	80005cc <LireMemoireEEPROM>
	for (int j = 0; j < nb_iter; j++){
 800045c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000460:	3301      	adds	r3, #1
 8000462:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8000466:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800046a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800046e:	429a      	cmp	r2, r3
 8000470:	f6ff af7c 	blt.w	800036c <main+0x1a4>
	}

  /* Infinite loop */
  while (1)
  {
	i++;
 8000474:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000478:	3301      	adds	r3, #1
 800047a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800047e:	e7f9      	b.n	8000474 <main+0x2ac>
 8000480:	40020c00 	.word	0x40020c00
 8000484:	2000001c 	.word	0x2000001c

08000488 <ConfigureGPIO>:

#include "memory_control.h"


void ConfigureGPIO(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	// Enable GPIOA Clock
//	RCC->AHB1ENR |= BIT0;
	RCC->AHB1ENR |= (BIT1 | BIT3);	// Enable GPIOB and GPIOD Clock
 800048c:	4a1b      	ldr	r2, [pc, #108]	; (80004fc <ConfigureGPIO+0x74>)
 800048e:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <ConfigureGPIO+0x74>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000492:	f043 030a 	orr.w	r3, r3, #10
 8000496:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PA5, PA6, PA7 as Alternate functions (SCK, MISO, MOSI) and PA2, PA4 and PA3 as Outputs (write protect, chip select, hold)
//	GPIOA->MODER |= (BIT11 | BIT13 | BIT15 | BIT4 | BIT6 | BIT8);
	GPIOB->MODER |= (BIT7 | BIT9 | BIT11 | BIT12 | BIT14);	// Set PB3, PB4, PB5 as Alternate functions (SCK, MISO, MOSI) and PB6, PB7 and PD7 as Outputs (write protect, hold, chip select)
 8000498:	4a19      	ldr	r2, [pc, #100]	; (8000500 <ConfigureGPIO+0x78>)
 800049a:	4b19      	ldr	r3, [pc, #100]	; (8000500 <ConfigureGPIO+0x78>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f443 43b5 	orr.w	r3, r3, #23168	; 0x5a80
 80004a2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT14;
 80004a4:	4a17      	ldr	r2, [pc, #92]	; (8000504 <ConfigureGPIO+0x7c>)
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <ConfigureGPIO+0x7c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ae:	6013      	str	r3, [r2, #0]

	// Set pins SCK, MISO, MOSI and CS as High speed
//	GPIOA->OSPEEDR |= (BIT11 | BIT13 | BIT15 | BIT9);
	GPIOB->OSPEEDR |= (BIT7 | BIT9 | BIT11);
 80004b0:	4a13      	ldr	r2, [pc, #76]	; (8000500 <ConfigureGPIO+0x78>)
 80004b2:	4b13      	ldr	r3, [pc, #76]	; (8000500 <ConfigureGPIO+0x78>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	f443 6328 	orr.w	r3, r3, #2688	; 0xa80
 80004ba:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR |= BIT15;
 80004bc:	4a11      	ldr	r2, [pc, #68]	; (8000504 <ConfigureGPIO+0x7c>)
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <ConfigureGPIO+0x7c>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004c6:	6093      	str	r3, [r2, #8]

	// Set AF5(SPI1) for PA5, PA6, PA7
//	GPIOA->AFR[0] |= (BIT20 | BIT22 | BIT24 | BIT26 | BIT28 | BIT30);
	GPIOB->AFR[0] |= (BIT12 | BIT14 | BIT16 | BIT18 | BIT20 | BIT22);	// Set AF5(SPI1) for PB3, PB4, PB5
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <ConfigureGPIO+0x78>)
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <ConfigureGPIO+0x78>)
 80004cc:	6a1b      	ldr	r3, [r3, #32]
 80004ce:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 80004d2:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80004d6:	6213      	str	r3, [r2, #32]

	// Set Outputs to their "idle-state"
//	GPIOA->ODR |= (BIT2 | BIT3 | BIT4);
	GPIOB->ODR |= (BIT6 | BIT7);
 80004d8:	4a09      	ldr	r2, [pc, #36]	; (8000500 <ConfigureGPIO+0x78>)
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <ConfigureGPIO+0x78>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80004e2:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= BIT7;
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <ConfigureGPIO+0x7c>)
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <ConfigureGPIO+0x7c>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ee:	6153      	str	r3, [r2, #20]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40023800 	.word	0x40023800
 8000500:	40020400 	.word	0x40020400
 8000504:	40020c00 	.word	0x40020c00

08000508 <ConfigureSPI1>:

void ConfigureSPI1(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	// Disable SPI
	SPI1->CR1 &= ~(BIT6);
 800050c:	4a2d      	ldr	r2, [pc, #180]	; (80005c4 <ConfigureSPI1+0xbc>)
 800050e:	4b2d      	ldr	r3, [pc, #180]	; (80005c4 <ConfigureSPI1+0xbc>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	b29b      	uxth	r3, r3
 8000514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000518:	b29b      	uxth	r3, r3
 800051a:	8013      	strh	r3, [r2, #0]


	// Enable SPI1 Clock
	RCC->APB2ENR |= BIT12;
 800051c:	4a2a      	ldr	r2, [pc, #168]	; (80005c8 <ConfigureSPI1+0xc0>)
 800051e:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <ConfigureSPI1+0xc0>)
 8000520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000522:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000526:	6453      	str	r3, [r2, #68]	; 0x44


	// Configure Baudrate (6.72 MHz)
	SPI1->CR1 &= ~(BIT3 | BIT5);
 8000528:	4a26      	ldr	r2, [pc, #152]	; (80005c4 <ConfigureSPI1+0xbc>)
 800052a:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <ConfigureSPI1+0xbc>)
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	b29b      	uxth	r3, r3
 8000530:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000534:	b29b      	uxth	r3, r3
 8000536:	8013      	strh	r3, [r2, #0]
	SPI1->CR1 |= BIT4;
 8000538:	4a22      	ldr	r2, [pc, #136]	; (80005c4 <ConfigureSPI1+0xbc>)
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <ConfigureSPI1+0xbc>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	b29b      	uxth	r3, r3
 8000540:	f043 0310 	orr.w	r3, r3, #16
 8000544:	b29b      	uxth	r3, r3
 8000546:	8013      	strh	r3, [r2, #0]

	// Configure clock polatiry and phase (both to 1)
	//SPI1->CR1 |= (BIT0 | BIT1);

	// Configure Data frame format (8-bit)
	SPI1->CR1 &= ~(BIT11);
 8000548:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <ConfigureSPI1+0xbc>)
 800054a:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <ConfigureSPI1+0xbc>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	b29b      	uxth	r3, r3
 8000550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000554:	b29b      	uxth	r3, r3
 8000556:	8013      	strh	r3, [r2, #0]

	// Configure MSB first
	SPI1->CR1 &= ~(BIT7);
 8000558:	4a1a      	ldr	r2, [pc, #104]	; (80005c4 <ConfigureSPI1+0xbc>)
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <ConfigureSPI1+0xbc>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	b29b      	uxth	r3, r3
 8000560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000564:	b29b      	uxth	r3, r3
 8000566:	8013      	strh	r3, [r2, #0]

	// Configure NSS for software management
	SPI1->CR1 |= (BIT9 | BIT8);		// SSM = 1 and SSI = 1
 8000568:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <ConfigureSPI1+0xbc>)
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <ConfigureSPI1+0xbc>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	b29b      	uxth	r3, r3
 8000570:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000574:	b29b      	uxth	r3, r3
 8000576:	8013      	strh	r3, [r2, #0]
	SPI1->CR2 &= ~(BIT2);			// SSOE = 0
 8000578:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <ConfigureSPI1+0xbc>)
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <ConfigureSPI1+0xbc>)
 800057c:	889b      	ldrh	r3, [r3, #4]
 800057e:	b29b      	uxth	r3, r3
 8000580:	f023 0304 	bic.w	r3, r3, #4
 8000584:	b29b      	uxth	r3, r3
 8000586:	8093      	strh	r3, [r2, #4]

	// Configure Full-duplex mode
	SPI1->CR1 &= ~(BIT10);
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <ConfigureSPI1+0xbc>)
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <ConfigureSPI1+0xbc>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	b29b      	uxth	r3, r3
 8000590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000594:	b29b      	uxth	r3, r3
 8000596:	8013      	strh	r3, [r2, #0]

	// Configure MSTR and enable SPI
	SPI1->CR1 |= BIT2;
 8000598:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <ConfigureSPI1+0xbc>)
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <ConfigureSPI1+0xbc>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	8013      	strh	r3, [r2, #0]
	SPI1->CR1 |= BIT6;
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <ConfigureSPI1+0xbc>)
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <ConfigureSPI1+0xbc>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	8013      	strh	r3, [r2, #0]

//	unsigned int temp = SPI1->DR;
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40013000 	.word	0x40013000
 80005c8:	40023800 	.word	0x40023800

080005cc <LireMemoireEEPROM>:

char LireMemoireEEPROM (unsigned int AdresseEEPROM, unsigned int NbreOctets, unsigned char *Destination)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
	if(AdresseEEPROM > 0xffff)
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005de:	d301      	bcc.n	80005e4 <LireMemoireEEPROM+0x18>
	{
		return '1';
 80005e0:	2331      	movs	r3, #49	; 0x31
 80005e2:	e05f      	b.n	80006a4 <LireMemoireEEPROM+0xd8>
	}

	GPIOD->ODR &= ~(BIT7);
 80005e4:	4a31      	ldr	r2, [pc, #196]	; (80006ac <LireMemoireEEPROM+0xe0>)
 80005e6:	4b31      	ldr	r3, [pc, #196]	; (80006ac <LireMemoireEEPROM+0xe0>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005ee:	6153      	str	r3, [r2, #20]


	int NbrePage = ((NbreOctets) / 64) + 1;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	099b      	lsrs	r3, r3, #6
 80005f4:	3301      	adds	r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
	int NbreOctetsPage;
	for (int pageNumber = 0; pageNumber < NbrePage; pageNumber++){
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	e047      	b.n	800068e <LireMemoireEEPROM+0xc2>
		if (pageNumber == NbrePage - 1) NbreOctetsPage = NbreOctets % 64;
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	1e5a      	subs	r2, r3, #1
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	429a      	cmp	r2, r3
 8000606:	d104      	bne.n	8000612 <LireMemoireEEPROM+0x46>
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800060e:	61fb      	str	r3, [r7, #28]
 8000610:	e001      	b.n	8000616 <LireMemoireEEPROM+0x4a>
		else NbreOctetsPage = 64;
 8000612:	2340      	movs	r3, #64	; 0x40
 8000614:	61fb      	str	r3, [r7, #28]
		SendRWCommand(AdresseEEPROM + (pageNumber * 64 * 8), READ);
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	025b      	lsls	r3, r3, #9
 800061a:	461a      	mov	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	2103      	movs	r1, #3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f8d2 	bl	80007cc <SendRWCommand>
		while (NbreOctetsPage)
 8000628:	e022      	b.n	8000670 <LireMemoireEEPROM+0xa4>
		{
			while (( (SPI1->SR) & BIT7 )){};
 800062a:	bf00      	nop
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <LireMemoireEEPROM+0xe4>)
 800062e:	891b      	ldrh	r3, [r3, #8]
 8000630:	b29b      	uxth	r3, r3
 8000632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f8      	bne.n	800062c <LireMemoireEEPROM+0x60>
			DownOVRflag();
 800063a:	f000 f957 	bl	80008ec <DownOVRflag>
			SPI1->DR = 0xff;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <LireMemoireEEPROM+0xe4>)
 8000640:	22ff      	movs	r2, #255	; 0xff
 8000642:	819a      	strh	r2, [r3, #12]
			while (!((SPI1->SR) & BIT0 )){};
 8000644:	bf00      	nop
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <LireMemoireEEPROM+0xe4>)
 8000648:	891b      	ldrh	r3, [r3, #8]
 800064a:	b29b      	uxth	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0f8      	beq.n	8000646 <LireMemoireEEPROM+0x7a>
			*Destination++ = (SPI1->DR);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <LireMemoireEEPROM+0xe4>)
 800065c:	8992      	ldrh	r2, [r2, #12]
 800065e:	b292      	uxth	r2, r2
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	701a      	strb	r2, [r3, #0]
			NbreOctetsPage--;
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	3b01      	subs	r3, #1
 8000668:	61fb      	str	r3, [r7, #28]
			NbreOctets--;
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	3b01      	subs	r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
		while (NbreOctetsPage)
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1d9      	bne.n	800062a <LireMemoireEEPROM+0x5e>
		}
		for(int delay2 = 0; delay2 < 20; delay2++){};
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	e002      	b.n	8000682 <LireMemoireEEPROM+0xb6>
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2b13      	cmp	r3, #19
 8000686:	ddf9      	ble.n	800067c <LireMemoireEEPROM+0xb0>
	for (int pageNumber = 0; pageNumber < NbrePage; pageNumber++){
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	3301      	adds	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	69ba      	ldr	r2, [r7, #24]
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	429a      	cmp	r2, r3
 8000694:	dbb3      	blt.n	80005fe <LireMemoireEEPROM+0x32>
	}

	GPIOD->ODR |= BIT7;
 8000696:	4a05      	ldr	r2, [pc, #20]	; (80006ac <LireMemoireEEPROM+0xe0>)
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <LireMemoireEEPROM+0xe0>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a0:	6153      	str	r3, [r2, #20]

	return '0';
 80006a2:	2330      	movs	r3, #48	; 0x30
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40020c00 	.word	0x40020c00
 80006b0:	40013000 	.word	0x40013000

080006b4 <EcrireMemoireEEPROM>:
char EcrireMemoireEEPROM (unsigned int AdresseEEPROM, unsigned int NbreOctets, unsigned char *Source)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
//
//	SendCommand(WREN);
//	for(int delay2 = 0; delay2 < 20; delay2++){};
//	GPIOD->ODR |= BIT7;

	if(AdresseEEPROM + NbreOctets * 8 > 0xffff)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	00da      	lsls	r2, r3, #3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006cc:	d301      	bcc.n	80006d2 <EcrireMemoireEEPROM+0x1e>
	{
		return '1';
 80006ce:	2331      	movs	r3, #49	; 0x31
 80006d0:	e071      	b.n	80007b6 <EcrireMemoireEEPROM+0x102>
	}

	DownOVRflag();
 80006d2:	f000 f90b 	bl	80008ec <DownOVRflag>
	GPIOD->ODR &= ~(BIT7);
 80006d6:	4a3a      	ldr	r2, [pc, #232]	; (80007c0 <EcrireMemoireEEPROM+0x10c>)
 80006d8:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <EcrireMemoireEEPROM+0x10c>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006e0:	6153      	str	r3, [r2, #20]

	int i = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
	int NbrePage = ((NbreOctets) / 64) + 1;
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	099b      	lsrs	r3, r3, #6
 80006ea:	3301      	adds	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
	int NbreOctetsPage;
	for (int pageNumber = 0; pageNumber < NbrePage; pageNumber++){
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
 80006f2:	e03c      	b.n	800076e <EcrireMemoireEEPROM+0xba>
		if (pageNumber == NbrePage - 1) NbreOctetsPage = NbreOctets % 64;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d104      	bne.n	8000708 <EcrireMemoireEEPROM+0x54>
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000704:	623b      	str	r3, [r7, #32]
 8000706:	e001      	b.n	800070c <EcrireMemoireEEPROM+0x58>
		else NbreOctetsPage = 64;
 8000708:	2340      	movs	r3, #64	; 0x40
 800070a:	623b      	str	r3, [r7, #32]
		SendRWCommand(AdresseEEPROM + (pageNumber * 64 * 8), WRITE);
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	025b      	lsls	r3, r3, #9
 8000710:	461a      	mov	r2, r3
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4413      	add	r3, r2
 8000716:	2102      	movs	r1, #2
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f857 	bl	80007cc <SendRWCommand>
		while(NbreOctetsPage > 0)
 800071e:	e017      	b.n	8000750 <EcrireMemoireEEPROM+0x9c>
		{
			while (!((SPI1->SR) & BIT1)){};
 8000720:	bf00      	nop
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <EcrireMemoireEEPROM+0x110>)
 8000724:	891b      	ldrh	r3, [r3, #8]
 8000726:	b29b      	uxth	r3, r3
 8000728:	f003 0302 	and.w	r3, r3, #2
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0f8      	beq.n	8000722 <EcrireMemoireEEPROM+0x6e>

			SPI1->DR = Source[i];
 8000730:	4924      	ldr	r1, [pc, #144]	; (80007c4 <EcrireMemoireEEPROM+0x110>)
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b29b      	uxth	r3, r3
 800073c:	818b      	strh	r3, [r1, #12]
			i++;
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	3301      	adds	r3, #1
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
			NbreOctets--;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	3b01      	subs	r3, #1
 8000748:	60bb      	str	r3, [r7, #8]
			NbreOctetsPage--;
 800074a:	6a3b      	ldr	r3, [r7, #32]
 800074c:	3b01      	subs	r3, #1
 800074e:	623b      	str	r3, [r7, #32]
		while(NbreOctetsPage > 0)
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	2b00      	cmp	r3, #0
 8000754:	dce4      	bgt.n	8000720 <EcrireMemoireEEPROM+0x6c>
		}
		for(int delay2 = 0; delay2 < 20; delay2++){};
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	e002      	b.n	8000762 <EcrireMemoireEEPROM+0xae>
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	3301      	adds	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	2b13      	cmp	r3, #19
 8000766:	ddf9      	ble.n	800075c <EcrireMemoireEEPROM+0xa8>
	for (int pageNumber = 0; pageNumber < NbrePage; pageNumber++){
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	3301      	adds	r3, #1
 800076c:	61fb      	str	r3, [r7, #28]
 800076e:	69fa      	ldr	r2, [r7, #28]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	429a      	cmp	r2, r3
 8000774:	dbbe      	blt.n	80006f4 <EcrireMemoireEEPROM+0x40>
	}

	while (!((SPI1->SR) & BIT1)) {};
 8000776:	bf00      	nop
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <EcrireMemoireEEPROM+0x110>)
 800077a:	891b      	ldrh	r3, [r3, #8]
 800077c:	b29b      	uxth	r3, r3
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f8      	beq.n	8000778 <EcrireMemoireEEPROM+0xc4>
	while (((SPI1->SR) & BIT7)) {};
 8000786:	bf00      	nop
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <EcrireMemoireEEPROM+0x110>)
 800078a:	891b      	ldrh	r3, [r3, #8]
 800078c:	b29b      	uxth	r3, r3
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f8      	bne.n	8000788 <EcrireMemoireEEPROM+0xd4>

	GPIOD->ODR |= BIT7;
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <EcrireMemoireEEPROM+0x10c>)
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <EcrireMemoireEEPROM+0x10c>)
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6153      	str	r3, [r2, #20]

	DownOVRflag();
 80007a2:	f000 f8a3 	bl	80008ec <DownOVRflag>



	pageOffset += NbreOctets * 8;
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	00da      	lsls	r2, r3, #3
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <EcrireMemoireEEPROM+0x114>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <EcrireMemoireEEPROM+0x114>)
 80007b2:	6013      	str	r3, [r2, #0]


	return '0';
 80007b4:	2330      	movs	r3, #48	; 0x30
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3728      	adds	r7, #40	; 0x28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40020c00 	.word	0x40020c00
 80007c4:	40013000 	.word	0x40013000
 80007c8:	2000001c 	.word	0x2000001c

080007cc <SendRWCommand>:
/*
 * Sends a command to the memory cell. The attribute "command" should correspond to one of the macros defined in memory_control.h,
 * while the "address" attribute should correspond to the memory address that should be written/read.
 */
void SendRWCommand(unsigned int address, unsigned char command)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
	unsigned char high, low;
	high = (address >> 8);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	0a1b      	lsrs	r3, r3, #8
 80007dc:	73fb      	strb	r3, [r7, #15]
	low = address;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	73bb      	strb	r3, [r7, #14]
	while (!(SPI1->SR & BIT1)){};
 80007e2:	bf00      	nop
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <SendRWCommand+0x6c>)
 80007e6:	891b      	ldrh	r3, [r3, #8]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f8      	beq.n	80007e4 <SendRWCommand+0x18>
	SPI1->DR = command;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <SendRWCommand+0x6c>)
 80007f4:	78fa      	ldrb	r2, [r7, #3]
 80007f6:	b292      	uxth	r2, r2
 80007f8:	819a      	strh	r2, [r3, #12]

	while (!(SPI1->SR & BIT1)){};
 80007fa:	bf00      	nop
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <SendRWCommand+0x6c>)
 80007fe:	891b      	ldrh	r3, [r3, #8]
 8000800:	b29b      	uxth	r3, r3
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0f8      	beq.n	80007fc <SendRWCommand+0x30>
	SPI1->DR = high;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <SendRWCommand+0x6c>)
 800080c:	7bfa      	ldrb	r2, [r7, #15]
 800080e:	b292      	uxth	r2, r2
 8000810:	819a      	strh	r2, [r3, #12]
	while (!(SPI1->SR & BIT1)){};
 8000812:	bf00      	nop
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <SendRWCommand+0x6c>)
 8000816:	891b      	ldrh	r3, [r3, #8]
 8000818:	b29b      	uxth	r3, r3
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0f8      	beq.n	8000814 <SendRWCommand+0x48>
	SPI1->DR = low;
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SendRWCommand+0x6c>)
 8000824:	7bba      	ldrb	r2, [r7, #14]
 8000826:	b292      	uxth	r2, r2
 8000828:	819a      	strh	r2, [r3, #12]
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40013000 	.word	0x40013000

0800083c <SendCommand>:

void SendCommand(unsigned char command)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	while (!(SPI1->SR & BIT1)){};
 8000846:	bf00      	nop
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <SendCommand+0x30>)
 800084a:	891b      	ldrh	r3, [r3, #8]
 800084c:	b29b      	uxth	r3, r3
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f8      	beq.n	8000848 <SendCommand+0xc>
	SPI1->DR = command;
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <SendCommand+0x30>)
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	b292      	uxth	r2, r2
 800085c:	819a      	strh	r2, [r3, #12]
	//volatile unsigned char clear = SPI1->DR;
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40013000 	.word	0x40013000

08000870 <ReadMemSR>:

unsigned int ReadMemSR(unsigned char *Destination)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	GPIOD->ODR &= ~BIT7;
 8000878:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <ReadMemSR+0x74>)
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <ReadMemSR+0x74>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000882:	6153      	str	r3, [r2, #20]
	SendCommand(RDSR);
 8000884:	2005      	movs	r0, #5
 8000886:	f7ff ffd9 	bl	800083c <SendCommand>

	while (( (SPI1->SR) & BIT7 )){};
 800088a:	bf00      	nop
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <ReadMemSR+0x78>)
 800088e:	891b      	ldrh	r3, [r3, #8]
 8000890:	b29b      	uxth	r3, r3
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f8      	bne.n	800088c <ReadMemSR+0x1c>
	volatile unsigned int clear = (SPI1->DR);
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <ReadMemSR+0x78>)
 800089c:	899b      	ldrh	r3, [r3, #12]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	60fb      	str	r3, [r7, #12]
	SPI1->DR = 0xff;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <ReadMemSR+0x78>)
 80008a4:	22ff      	movs	r2, #255	; 0xff
 80008a6:	819a      	strh	r2, [r3, #12]
	while (!((SPI1->SR) & BIT0 )){};
 80008a8:	bf00      	nop
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <ReadMemSR+0x78>)
 80008ac:	891b      	ldrh	r3, [r3, #8]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d0f8      	beq.n	80008aa <ReadMemSR+0x3a>
	*Destination = (SPI1->DR);
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <ReadMemSR+0x78>)
 80008ba:	899b      	ldrh	r3, [r3, #12]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	701a      	strb	r2, [r3, #0]
	volatile unsigned int return_value = (SPI1->DR);
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <ReadMemSR+0x78>)
 80008c6:	899b      	ldrh	r3, [r3, #12]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	60bb      	str	r3, [r7, #8]

	GPIOD->ODR |= BIT7;
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <ReadMemSR+0x74>)
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <ReadMemSR+0x74>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d6:	6153      	str	r3, [r2, #20]

	return return_value;
 80008d8:	68bb      	ldr	r3, [r7, #8]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	40013000 	.word	0x40013000

080008ec <DownOVRflag>:

void DownOVRflag(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
//	if ((SPI1->SR & BIT6))
	{
		unsigned int temp = SPI1->DR;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <DownOVRflag+0x24>)
 80008f4:	899b      	ldrh	r3, [r3, #12]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	607b      	str	r3, [r7, #4]
		temp = SPI1->SR;
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <DownOVRflag+0x24>)
 80008fc:	891b      	ldrh	r3, [r3, #8]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	607b      	str	r3, [r7, #4]
	}
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40013000 	.word	0x40013000

08000914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800094c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000918:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800091a:	e003      	b.n	8000924 <LoopCopyDataInit>

0800091c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800091e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000920:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000922:	3104      	adds	r1, #4

08000924 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000928:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800092a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800092c:	d3f6      	bcc.n	800091c <CopyDataInit>
  ldr  r2, =_sbss
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000930:	e002      	b.n	8000938 <LoopFillZerobss>

08000932 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000932:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000934:	f842 3b04 	str.w	r3, [r2], #4

08000938 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800093a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800093c:	d3f9      	bcc.n	8000932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800093e:	f000 f841 	bl	80009c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000942:	f000 f8f1 	bl	8000b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000946:	f7ff fc3f 	bl	80001c8 <main>
  bx  lr    
 800094a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800094c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000950:	08000b90 	.word	0x08000b90
  ldr  r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000958:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 800095c:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000960:	20000020 	.word	0x20000020

08000964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC_IRQHandler>

08000966 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000978:	e7fe      	b.n	8000978 <HardFault_Handler+0x4>

0800097a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800097e:	e7fe      	b.n	800097e <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000984:	e7fe      	b.n	8000984 <BusFault_Handler+0x4>

08000986 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800098a:	e7fe      	b.n	800098a <UsageFault_Handler+0x4>

0800098c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <SystemInit+0x60>)
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <SystemInit+0x60>)
 80009cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009d8:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <SystemInit+0x64>)
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <SystemInit+0x64>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <SystemInit+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <SystemInit+0x64>)
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <SystemInit+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <SystemInit+0x64>)
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <SystemInit+0x68>)
 80009fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a00:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <SystemInit+0x64>)
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <SystemInit+0x64>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000a12:	f000 f80d 	bl	8000a30 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a16:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <SystemInit+0x60>)
 8000a18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a1c:	609a      	str	r2, [r3, #8]
#endif
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	24003010 	.word	0x24003010

08000a30 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000a3e:	4a36      	ldr	r2, [pc, #216]	; (8000b18 <SetSysClock+0xe8>)
 8000a40:	4b35      	ldr	r3, [pc, #212]	; (8000b18 <SetSysClock+0xe8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a48:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <SetSysClock+0xe8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a52:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d103      	bne.n	8000a68 <SetSysClock+0x38>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a66:	d1f0      	bne.n	8000a4a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <SetSysClock+0xe8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000a74:	2301      	movs	r3, #1
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	e001      	b.n	8000a7e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d142      	bne.n	8000b0a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a84:	4a24      	ldr	r2, [pc, #144]	; (8000b18 <SetSysClock+0xe8>)
 8000a86:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <SetSysClock+0xe8>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000a90:	4a22      	ldr	r2, [pc, #136]	; (8000b1c <SetSysClock+0xec>)
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <SetSysClock+0xec>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a9a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000a9c:	4a1e      	ldr	r2, [pc, #120]	; (8000b18 <SetSysClock+0xe8>)
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <SetSysClock+0xe8>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000aa4:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <SetSysClock+0xe8>)
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <SetSysClock+0xe8>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aae:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <SetSysClock+0xe8>)
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <SetSysClock+0xe8>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000aba:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <SetSysClock+0xe8>)
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <SetSysClock+0xf0>)
 8000ac0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000ac2:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <SetSysClock+0xe8>)
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <SetSysClock+0xe8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000acc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ace:	bf00      	nop
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <SetSysClock+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0f9      	beq.n	8000ad0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <SetSysClock+0xf4>)
 8000ade:	f240 7205 	movw	r2, #1797	; 0x705
 8000ae2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <SetSysClock+0xe8>)
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <SetSysClock+0xe8>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f023 0303 	bic.w	r3, r3, #3
 8000aee:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000af0:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <SetSysClock+0xe8>)
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <SetSysClock+0xe8>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000afc:	bf00      	nop
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <SetSysClock+0xe8>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f003 030c 	and.w	r3, r3, #12
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	d1f9      	bne.n	8000afe <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40007000 	.word	0x40007000
 8000b20:	07405419 	.word	0x07405419
 8000b24:	40023c00 	.word	0x40023c00

08000b28 <__libc_init_array>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	4e0d      	ldr	r6, [pc, #52]	; (8000b60 <__libc_init_array+0x38>)
 8000b2c:	4c0d      	ldr	r4, [pc, #52]	; (8000b64 <__libc_init_array+0x3c>)
 8000b2e:	1ba4      	subs	r4, r4, r6
 8000b30:	10a4      	asrs	r4, r4, #2
 8000b32:	2500      	movs	r5, #0
 8000b34:	42a5      	cmp	r5, r4
 8000b36:	d109      	bne.n	8000b4c <__libc_init_array+0x24>
 8000b38:	4e0b      	ldr	r6, [pc, #44]	; (8000b68 <__libc_init_array+0x40>)
 8000b3a:	4c0c      	ldr	r4, [pc, #48]	; (8000b6c <__libc_init_array+0x44>)
 8000b3c:	f000 f818 	bl	8000b70 <_init>
 8000b40:	1ba4      	subs	r4, r4, r6
 8000b42:	10a4      	asrs	r4, r4, #2
 8000b44:	2500      	movs	r5, #0
 8000b46:	42a5      	cmp	r5, r4
 8000b48:	d105      	bne.n	8000b56 <__libc_init_array+0x2e>
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b50:	4798      	blx	r3
 8000b52:	3501      	adds	r5, #1
 8000b54:	e7ee      	b.n	8000b34 <__libc_init_array+0xc>
 8000b56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b5a:	4798      	blx	r3
 8000b5c:	3501      	adds	r5, #1
 8000b5e:	e7f2      	b.n	8000b46 <__libc_init_array+0x1e>
 8000b60:	08000b88 	.word	0x08000b88
 8000b64:	08000b88 	.word	0x08000b88
 8000b68:	08000b88 	.word	0x08000b88
 8000b6c:	08000b8c 	.word	0x08000b8c

08000b70 <_init>:
 8000b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b72:	bf00      	nop
 8000b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b76:	bc08      	pop	{r3}
 8000b78:	469e      	mov	lr, r3
 8000b7a:	4770      	bx	lr

08000b7c <_fini>:
 8000b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7e:	bf00      	nop
 8000b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b82:	bc08      	pop	{r3}
 8000b84:	469e      	mov	lr, r3
 8000b86:	4770      	bx	lr
