
Labo5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b38  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cc0  08000cc8  00010cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000cc0  08000cc0  00010cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000cc4  08000cc4  00010cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010cc8  2**0
                  CONTENTS
  7 .bss          00000054  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000054  20000054  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010cc8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000026d9  00000000  00000000  00010cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000008f3  00000000  00000000  000133d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001f8  00000000  00000000  00013cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000180  00000000  00000000  00013ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000f90  00000000  00000000  00014040  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000083a  00000000  00000000  00014fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001580a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000584  00000000  00000000  00015888  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00015e0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ca8 	.word	0x08000ca8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000ca8 	.word	0x08000ca8

080001c8 <readCommand>:
 *      Author: etienne
 */

#include <command.h>

char readCommand(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	int p_indx = ptr_read;
 80001ce:	4b29      	ldr	r3, [pc, #164]	; (8000274 <readCommand+0xac>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	607b      	str	r3, [r7, #4]
	unsigned char cmd = buffer[p_indx++];
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	1c5a      	adds	r2, r3, #1
 80001d8:	607a      	str	r2, [r7, #4]
 80001da:	4a27      	ldr	r2, [pc, #156]	; (8000278 <readCommand+0xb0>)
 80001dc:	5cd3      	ldrb	r3, [r2, r3]
 80001de:	70fb      	strb	r3, [r7, #3]
	if (p_indx>=20) p_indx = 0;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b13      	cmp	r3, #19
 80001e4:	dd01      	ble.n	80001ea <readCommand+0x22>
 80001e6:	2300      	movs	r3, #0
 80001e8:	607b      	str	r3, [r7, #4]
	unsigned char param = buffer[p_indx++];
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	1c5a      	adds	r2, r3, #1
 80001ee:	607a      	str	r2, [r7, #4]
 80001f0:	4a21      	ldr	r2, [pc, #132]	; (8000278 <readCommand+0xb0>)
 80001f2:	5cd3      	ldrb	r3, [r2, r3]
 80001f4:	70bb      	strb	r3, [r7, #2]
	if (p_indx>=20) p_indx = 0;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2b13      	cmp	r3, #19
 80001fa:	dd01      	ble.n	8000200 <readCommand+0x38>
 80001fc:	2300      	movs	r3, #0
 80001fe:	607b      	str	r3, [r7, #4]
	unsigned char chk = buffer[p_indx];
 8000200:	4a1d      	ldr	r2, [pc, #116]	; (8000278 <readCommand+0xb0>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	4413      	add	r3, r2
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	707b      	strb	r3, [r7, #1]

	bytesToRead--;
 800020a:	4b1c      	ldr	r3, [pc, #112]	; (800027c <readCommand+0xb4>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	3b01      	subs	r3, #1
 8000210:	4a1a      	ldr	r2, [pc, #104]	; (800027c <readCommand+0xb4>)
 8000212:	6013      	str	r3, [r2, #0]
	ptr_read++;
 8000214:	4b17      	ldr	r3, [pc, #92]	; (8000274 <readCommand+0xac>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	4a16      	ldr	r2, [pc, #88]	; (8000274 <readCommand+0xac>)
 800021c:	6013      	str	r3, [r2, #0]
	if (ptr_read>=20) ptr_read = 0;
 800021e:	4b15      	ldr	r3, [pc, #84]	; (8000274 <readCommand+0xac>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b13      	cmp	r3, #19
 8000224:	dd02      	ble.n	800022c <readCommand+0x64>
 8000226:	4b13      	ldr	r3, [pc, #76]	; (8000274 <readCommand+0xac>)
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
	if((cmd + param + chk) % 256 != 0){
 800022c:	78fa      	ldrb	r2, [r7, #3]
 800022e:	78bb      	ldrb	r3, [r7, #2]
 8000230:	441a      	add	r2, r3
 8000232:	787b      	ldrb	r3, [r7, #1]
 8000234:	4413      	add	r3, r2
 8000236:	b2db      	uxtb	r3, r3
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <readCommand+0x78>
		return '0';
 800023c:	2330      	movs	r3, #48	; 0x30
 800023e:	e015      	b.n	800026c <readCommand+0xa4>
	}

	if(cmd == 0x41) gereLED(param);
 8000240:	78fb      	ldrb	r3, [r7, #3]
 8000242:	2b41      	cmp	r3, #65	; 0x41
 8000244:	d104      	bne.n	8000250 <readCommand+0x88>
 8000246:	78bb      	ldrb	r3, [r7, #2]
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f819 	bl	8000280 <gereLED>
 800024e:	e00c      	b.n	800026a <readCommand+0xa2>
	else if(cmd == 0x42) eraseLCD();
 8000250:	78fb      	ldrb	r3, [r7, #3]
 8000252:	2b42      	cmp	r3, #66	; 0x42
 8000254:	d102      	bne.n	800025c <readCommand+0x94>
 8000256:	f000 f833 	bl	80002c0 <eraseLCD>
 800025a:	e006      	b.n	800026a <readCommand+0xa2>
	else if(cmd == 0x43) displayCharLCD(param);
 800025c:	78fb      	ldrb	r3, [r7, #3]
 800025e:	2b43      	cmp	r3, #67	; 0x43
 8000260:	d103      	bne.n	800026a <readCommand+0xa2>
 8000262:	78bb      	ldrb	r3, [r7, #2]
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f847 	bl	80002f8 <displayCharLCD>

	return '1';
 800026a:	2331      	movs	r3, #49	; 0x31
}
 800026c:	4618      	mov	r0, r3
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000024 	.word	0x20000024
 8000278:	2000003c 	.word	0x2000003c
 800027c:	20000028 	.word	0x20000028

08000280 <gereLED>:

void gereLED(uint8_t p_para){
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	if(p_para == 0x30){
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2b30      	cmp	r3, #48	; 0x30
 800028e:	d106      	bne.n	800029e <gereLED+0x1e>
		GPIOD->ODR &= ~BIT15;
 8000290:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <gereLED+0x3c>)
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <gereLED+0x3c>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800029a:	6153      	str	r3, [r2, #20]
	}
	else if(p_para == 0x31){
		GPIOD->ODR |= BIT15;
	}
}
 800029c:	e008      	b.n	80002b0 <gereLED+0x30>
	else if(p_para == 0x31){
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	2b31      	cmp	r3, #49	; 0x31
 80002a2:	d105      	bne.n	80002b0 <gereLED+0x30>
		GPIOD->ODR |= BIT15;
 80002a4:	4a05      	ldr	r2, [pc, #20]	; (80002bc <gereLED+0x3c>)
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <gereLED+0x3c>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002ae:	6153      	str	r3, [r2, #20]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40020c00 	.word	0x40020c00

080002c0 <eraseLCD>:

void eraseLCD(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
	instructLCD(0xC0);	// 2nd line
 80002c6:	20c0      	movs	r0, #192	; 0xc0
 80002c8:	f000 f96c 	bl	80005a4 <instructLCD>
	for (int i = 0; i < 16; i++)
 80002cc:	2300      	movs	r3, #0
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	e005      	b.n	80002de <eraseLCD+0x1e>
		writeLCD(0x20); // white space
 80002d2:	2020      	movs	r0, #32
 80002d4:	f000 f91a 	bl	800050c <writeLCD>
	for (int i = 0; i < 16; i++)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	3301      	adds	r3, #1
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2b0f      	cmp	r3, #15
 80002e2:	ddf6      	ble.n	80002d2 <eraseLCD+0x12>
	position = 0;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <eraseLCD+0x34>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	2000002c 	.word	0x2000002c

080002f8 <displayCharLCD>:

void displayCharLCD(uint8_t p_para){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
	int charPos = 0xC0 + position;
 8000302:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <displayCharLCD+0x40>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	33c0      	adds	r3, #192	; 0xc0
 8000308:	60fb      	str	r3, [r7, #12]
	instructLCD(charPos);	// 2nd line
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f000 f94a 	bl	80005a4 <instructLCD>
	writeLCD(p_para);
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f8fa 	bl	800050c <writeLCD>
	position++;
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <displayCharLCD+0x40>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	3301      	adds	r3, #1
 800031e:	4a06      	ldr	r2, [pc, #24]	; (8000338 <displayCharLCD+0x40>)
 8000320:	6013      	str	r3, [r2, #0]
	if(position > 16) position = 16;
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <displayCharLCD+0x40>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b10      	cmp	r3, #16
 8000328:	dd02      	ble.n	8000330 <displayCharLCD+0x38>
 800032a:	4b03      	ldr	r3, [pc, #12]	; (8000338 <displayCharLCD+0x40>)
 800032c:	2210      	movs	r2, #16
 800032e:	601a      	str	r2, [r3, #0]
}
 8000330:	bf00      	nop
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	2000002c 	.word	0x2000002c

0800033c <configureTIM3>:
#include "lcd_control.h"

volatile unsigned int lcdInit = 0;

void configureTIM3(float p_frequence)
{
 800033c:	b480      	push	{r7}
 800033e:	b087      	sub	sp, #28
 8000340:	af00      	add	r7, sp, #0
 8000342:	ed87 0a01 	vstr	s0, [r7, #4]
	volatile int sys_clk = 53760000; //syscoreclk
 8000346:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <configureTIM3+0xc0>)
 8000348:	617b      	str	r3, [r7, #20]
	volatile int prescaler_1 = 500; // 1 to 512
 800034a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800034e:	613b      	str	r3, [r7, #16]
	volatile int prescaler_2 = 2; // prescaller_2 % prescaler_3 = 4/2 = 2
 8000350:	2302      	movs	r3, #2
 8000352:	60fb      	str	r3, [r7, #12]

	RCC->APB1ENR |= BIT1;															// clock enable
 8000354:	4a2a      	ldr	r2, [pc, #168]	; (8000400 <configureTIM3+0xc4>)
 8000356:	4b2a      	ldr	r3, [pc, #168]	; (8000400 <configureTIM3+0xc4>)
 8000358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800035a:	f043 0302 	orr.w	r3, r3, #2
 800035e:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->CR1 &= ~BIT0;																// clock disable
 8000360:	4a28      	ldr	r2, [pc, #160]	; (8000404 <configureTIM3+0xc8>)
 8000362:	4b28      	ldr	r3, [pc, #160]	; (8000404 <configureTIM3+0xc8>)
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	b29b      	uxth	r3, r3
 8000368:	f023 0301 	bic.w	r3, r3, #1
 800036c:	b29b      	uxth	r3, r3
 800036e:	8013      	strh	r3, [r2, #0]

	TIM3->CR1 |= BIT4;																// set as downcounter
 8000370:	4a24      	ldr	r2, [pc, #144]	; (8000404 <configureTIM3+0xc8>)
 8000372:	4b24      	ldr	r3, [pc, #144]	; (8000404 <configureTIM3+0xc8>)
 8000374:	881b      	ldrh	r3, [r3, #0]
 8000376:	b29b      	uxth	r3, r3
 8000378:	f043 0310 	orr.w	r3, r3, #16
 800037c:	b29b      	uxth	r3, r3
 800037e:	8013      	strh	r3, [r2, #0]

	TIM3->DIER |= BIT0;																// peripheral interrupt enable
 8000380:	4a20      	ldr	r2, [pc, #128]	; (8000404 <configureTIM3+0xc8>)
 8000382:	4b20      	ldr	r3, [pc, #128]	; (8000404 <configureTIM3+0xc8>)
 8000384:	899b      	ldrh	r3, [r3, #12]
 8000386:	b29b      	uxth	r3, r3
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	b29b      	uxth	r3, r3
 800038e:	8193      	strh	r3, [r2, #12]
	NVIC->ISER[0] |= BIT29;															// NVIC timer interrupt enable
 8000390:	4a1d      	ldr	r2, [pc, #116]	; (8000408 <configureTIM3+0xcc>)
 8000392:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <configureTIM3+0xcc>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800039a:	6013      	str	r3, [r2, #0]

	TIM3->PSC = prescaler_1;														// prescaler
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <configureTIM3+0xc8>)
 800039e:	693a      	ldr	r2, [r7, #16]
 80003a0:	b292      	uxth	r2, r2
 80003a2:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->ARR = (sys_clk/(prescaler_1*prescaler_2))/(p_frequence);					// set max value (when to interrupt)
 80003a4:	4817      	ldr	r0, [pc, #92]	; (8000404 <configureTIM3+0xc8>)
 80003a6:	697a      	ldr	r2, [r7, #20]
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	68f9      	ldr	r1, [r7, #12]
 80003ac:	fb01 f303 	mul.w	r3, r1, r3
 80003b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80003b4:	ee07 3a90 	vmov	s15, r3
 80003b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80003bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80003c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003c8:	ee17 3a90 	vmov	r3, s15
 80003cc:	62c3      	str	r3, [r0, #44]	; 0x2c


	TIM3->CR1 |= BIT7;																// auto-reload preload
 80003ce:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <configureTIM3+0xc8>)
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <configureTIM3+0xc8>)
 80003d2:	881b      	ldrh	r3, [r3, #0]
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003da:	b29b      	uxth	r3, r3
 80003dc:	8013      	strh	r3, [r2, #0]

	TIM3->CR1 |= BIT0;																// clock start
 80003de:	4a09      	ldr	r2, [pc, #36]	; (8000404 <configureTIM3+0xc8>)
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <configureTIM3+0xc8>)
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	f043 0301 	orr.w	r3, r3, #1
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	8013      	strh	r3, [r2, #0]
}
 80003ee:	bf00      	nop
 80003f0:	371c      	adds	r7, #28
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	03345000 	.word	0x03345000
 8000400:	40023800 	.word	0x40023800
 8000404:	40000400 	.word	0x40000400
 8000408:	e000e100 	.word	0xe000e100

0800040c <configureLcdGPIO>:




void configureLcdGPIO(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

	// activer clocks des GPIOs B, D et timer 2
	RCC->AHB1ENR |= BIT1 | BIT3;
 8000410:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <configureLcdGPIO+0x3c>)
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <configureLcdGPIO+0x3c>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	f043 030a 	orr.w	r3, r3, #10
 800041a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= BIT0;
 800041c:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <configureLcdGPIO+0x3c>)
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <configureLcdGPIO+0x3c>)
 8000420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6413      	str	r3, [r2, #64]	; 0x40

	// configurer pins instruction LCD output
	GPIOB->MODER |= BIT6 | BIT8 | BIT10;
 8000428:	4a08      	ldr	r2, [pc, #32]	; (800044c <configureLcdGPIO+0x40>)
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <configureLcdGPIO+0x40>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f443 63a8 	orr.w	r3, r3, #1344	; 0x540
 8000432:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BIT7 | BIT9 | BIT11);
 8000434:	4a05      	ldr	r2, [pc, #20]	; (800044c <configureLcdGPIO+0x40>)
 8000436:	4b05      	ldr	r3, [pc, #20]	; (800044c <configureLcdGPIO+0x40>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f423 6328 	bic.w	r3, r3, #2688	; 0xa80
 800043e:	6013      	str	r3, [r2, #0]

	//configurer pins donnees LCD output
	setLcdBusOutput();
 8000440:	f000 f806 	bl	8000450 <setLcdBusOutput>

}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40023800 	.word	0x40023800
 800044c:	40020400 	.word	0x40020400

08000450 <setLcdBusOutput>:

void setLcdBusOutput(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
	// mettre bus en monde sortie
	GPIOD->MODER |= BIT0 | BIT2 | BIT4 | BIT6 | BIT8 | BIT10 | BIT12 | BIT14;
 8000454:	4a0a      	ldr	r2, [pc, #40]	; (8000480 <setLcdBusOutput+0x30>)
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <setLcdBusOutput+0x30>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800045e:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000462:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(BIT1 | BIT3 | BIT5 | BIT7 | BIT9 | BIT11 | BIT13 | BIT15);
 8000464:	4a06      	ldr	r2, [pc, #24]	; (8000480 <setLcdBusOutput+0x30>)
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <setLcdBusOutput+0x30>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f423 432a 	bic.w	r3, r3, #43520	; 0xaa00
 800046e:	f023 03aa 	bic.w	r3, r3, #170	; 0xaa
 8000472:	6013      	str	r3, [r2, #0]
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40020c00 	.word	0x40020c00

08000484 <setLcdBusInput>:

void setLcdBusInput(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	// mettre bus en monde sortie
	GPIOD->MODER &= ~(BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7 | BIT8 | BIT9 | BIT10 | BIT11 | BIT12 | BIT13 | BIT14 | BIT15);
 8000488:	4a05      	ldr	r2, [pc, #20]	; (80004a0 <setLcdBusInput+0x1c>)
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <setLcdBusInput+0x1c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	0c1b      	lsrs	r3, r3, #16
 8000490:	041b      	lsls	r3, r3, #16
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40020c00 	.word	0x40020c00

080004a4 <delay>:

void delay(int cycles){
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	for(volatile int wait_var = 0; wait_var < cycles; wait_var++){}
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	e002      	b.n	80004b8 <delay+0x14>
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	3301      	adds	r3, #1
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fa      	ldr	r2, [r7, #12]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	429a      	cmp	r2, r3
 80004be:	dbf8      	blt.n	80004b2 <delay+0xe>
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <checkBusyFlag>:

unsigned char checkBusyFlag(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	setLcdBusInput();
 80004d2:	f7ff ffd7 	bl	8000484 <setLcdBusInput>

	GPIOB->ODR |= (BIT_EN | BIT_RW);	// Enable ON, RS to high
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <checkBusyFlag+0x38>)
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <checkBusyFlag+0x38>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80004e0:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~BIT_RS;
 80004e2:	4a08      	ldr	r2, [pc, #32]	; (8000504 <checkBusyFlag+0x38>)
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <checkBusyFlag+0x38>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	f023 0308 	bic.w	r3, r3, #8
 80004ec:	6153      	str	r3, [r2, #20]
	
	unsigned char result = (GPIOD->IDR & BIT_D7);
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <checkBusyFlag+0x3c>)
 80004f0:	691b      	ldr	r3, [r3, #16]
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80004f8:	71fb      	strb	r3, [r7, #7]
	
	return result;
 80004fa:	79fb      	ldrb	r3, [r7, #7]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020400 	.word	0x40020400
 8000508:	40020c00 	.word	0x40020c00

0800050c <writeLCD>:

void writeLCD(int p_package)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	setLcdBusOutput();
 8000514:	f7ff ff9c 	bl	8000450 <setLcdBusOutput>

	GPIOB->ODR |= (BIT_EN | BIT_RS);	// Enable ON, RS to high
 8000518:	4a1f      	ldr	r2, [pc, #124]	; (8000598 <writeLCD+0x8c>)
 800051a:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <writeLCD+0x8c>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000522:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~BIT_RW;
 8000524:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <writeLCD+0x8c>)
 8000526:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <writeLCD+0x8c>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f023 0310 	bic.w	r3, r3, #16
 800052e:	6153      	str	r3, [r2, #20]

	GPIOD->ODR = (GPIOD->ODR & 0xFFFFFF00) | (p_package & 0xFF);		//print p_package
 8000530:	491a      	ldr	r1, [pc, #104]	; (800059c <writeLCD+0x90>)
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <writeLCD+0x90>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	4313      	orrs	r3, r2
 8000540:	614b      	str	r3, [r1, #20]


	delay(100);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f7ff ffae 	bl	80004a4 <delay>

	GPIOB->ODR &= ~BIT_EN;	// Enable OFF
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <writeLCD+0x8c>)
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <writeLCD+0x8c>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f023 0320 	bic.w	r3, r3, #32
 8000552:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~BIT_RS;
 8000554:	4a10      	ldr	r2, [pc, #64]	; (8000598 <writeLCD+0x8c>)
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <writeLCD+0x8c>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f023 0308 	bic.w	r3, r3, #8
 800055e:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= BIT_RW;
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <writeLCD+0x8c>)
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <writeLCD+0x8c>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f043 0310 	orr.w	r3, r3, #16
 800056a:	6153      	str	r3, [r2, #20]


    unsigned char flag = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]
    if((lcdInit = 0)){delay(10000);}
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <writeLCD+0x94>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
    else{flag = checkBusyFlag();}
 8000576:	f7ff ffa9 	bl	80004cc <checkBusyFlag>
 800057a:	4603      	mov	r3, r0
 800057c:	73fb      	strb	r3, [r7, #15]

    while (flag)
 800057e:	e003      	b.n	8000588 <writeLCD+0x7c>
    {
        flag = checkBusyFlag();
 8000580:	f7ff ffa4 	bl	80004cc <checkBusyFlag>
 8000584:	4603      	mov	r3, r0
 8000586:	73fb      	strb	r3, [r7, #15]
    while (flag)
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1f8      	bne.n	8000580 <writeLCD+0x74>
    }
}
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020400 	.word	0x40020400
 800059c:	40020c00 	.word	0x40020c00
 80005a0:	2000001c 	.word	0x2000001c

080005a4 <instructLCD>:

void instructLCD(int p_package)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	setLcdBusOutput();
 80005ac:	f7ff ff50 	bl	8000450 <setLcdBusOutput>

	GPIOB->ODR &= ~(BIT_RS | BIT_RW); //RS and RW to 0
 80005b0:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <instructLCD+0x80>)
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <instructLCD+0x80>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f023 0318 	bic.w	r3, r3, #24
 80005ba:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= BIT_EN;	// Enable ON
 80005bc:	4a19      	ldr	r2, [pc, #100]	; (8000624 <instructLCD+0x80>)
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <instructLCD+0x80>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f043 0320 	orr.w	r3, r3, #32
 80005c6:	6153      	str	r3, [r2, #20]

	GPIOD->ODR = (GPIOD->ODR & 0xFFFFFFF00) | (p_package & 0xFF);		//print p_package
 80005c8:	4917      	ldr	r1, [pc, #92]	; (8000628 <instructLCD+0x84>)
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <instructLCD+0x84>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4313      	orrs	r3, r2
 80005d8:	614b      	str	r3, [r1, #20]


	delay(100);
 80005da:	2064      	movs	r0, #100	; 0x64
 80005dc:	f7ff ff62 	bl	80004a4 <delay>
	GPIOB->ODR &= ~BIT_EN;	// Enable OFF
 80005e0:	4a10      	ldr	r2, [pc, #64]	; (8000624 <instructLCD+0x80>)
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <instructLCD+0x80>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f023 0320 	bic.w	r3, r3, #32
 80005ea:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= (BIT_RS | BIT_RW);
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <instructLCD+0x80>)
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <instructLCD+0x80>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f043 0318 	orr.w	r3, r3, #24
 80005f6:	6153      	str	r3, [r2, #20]

    unsigned char flag = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
    if((lcdInit = 0)){delay(10000);}
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <instructLCD+0x88>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
    else{flag = checkBusyFlag();}
 8000602:	f7ff ff63 	bl	80004cc <checkBusyFlag>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]

    while (flag)
 800060a:	e003      	b.n	8000614 <instructLCD+0x70>
    {
        flag = checkBusyFlag();
 800060c:	f7ff ff5e 	bl	80004cc <checkBusyFlag>
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]
    while (flag)
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f8      	bne.n	800060c <instructLCD+0x68>
    }
    
	
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40020400 	.word	0x40020400
 8000628:	40020c00 	.word	0x40020c00
 800062c:	2000001c 	.word	0x2000001c

08000630 <configureLCD>:

void configureLCD(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	//INIT SEQ.

	for(int iter = 0; iter < 4; iter++)
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	e005      	b.n	8000648 <configureLCD+0x18>
	{
		instructLCD(0x38);
 800063c:	2038      	movs	r0, #56	; 0x38
 800063e:	f7ff ffb1 	bl	80005a4 <instructLCD>
	for(int iter = 0; iter < 4; iter++)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3301      	adds	r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b03      	cmp	r3, #3
 800064c:	ddf6      	ble.n	800063c <configureLCD+0xc>
	}

	instructLCD(0x01);	// Display clear
 800064e:	2001      	movs	r0, #1
 8000650:	f7ff ffa8 	bl	80005a4 <instructLCD>
	instructLCD(0x0E);	// Display control (0x0C to erase cursor, 0x0E to display cursor)
 8000654:	200e      	movs	r0, #14
 8000656:	f7ff ffa5 	bl	80005a4 <instructLCD>
	writeLCD(0x4D);		// print M
 800065a:	204d      	movs	r0, #77	; 0x4d
 800065c:	f7ff ff56 	bl	800050c <writeLCD>
	writeLCD(0x53);		// print S
 8000660:	2053      	movs	r0, #83	; 0x53
 8000662:	f7ff ff53 	bl	800050c <writeLCD>
	writeLCD(0x5F);		// print _
 8000666:	205f      	movs	r0, #95	; 0x5f
 8000668:	f7ff ff50 	bl	800050c <writeLCD>
	writeLCD(0x45);		// print E
 800066c:	2045      	movs	r0, #69	; 0x45
 800066e:	f7ff ff4d 	bl	800050c <writeLCD>
	writeLCD(0x4D);		// print M
 8000672:	204d      	movs	r0, #77	; 0x4d
 8000674:	f7ff ff4a 	bl	800050c <writeLCD>
	instructLCD(0xC0);	// 2nd line
 8000678:	20c0      	movs	r0, #192	; 0xc0
 800067a:	f7ff ff93 	bl	80005a4 <instructLCD>

    lcdInit = 1;
 800067e:	4b03      	ldr	r3, [pc, #12]	; (800068c <configureLCD+0x5c>)
 8000680:	2201      	movs	r2, #1
 8000682:	601a      	str	r2, [r3, #0]

}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000001c 	.word	0x2000001c

08000690 <writeTime>:

void writeTime(unsigned int p_value)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	instructLCD(0x8F);	// set cursor
 8000698:	208f      	movs	r0, #143	; 0x8f
 800069a:	f7ff ff83 	bl	80005a4 <instructLCD>
	instructLCD(0x04);	// set left shift
 800069e:	2004      	movs	r0, #4
 80006a0:	f7ff ff80 	bl	80005a4 <instructLCD>
	setLcdBusOutput();
 80006a4:	f7ff fed4 	bl	8000450 <setLcdBusOutput>

	unsigned int intValue = p_value;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	617b      	str	r3, [r7, #20]

	for(int i = 0; i <= 4;i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	e018      	b.n	80006e4 <writeTime+0x54>
	{
		int value = intValue % 10;
 80006b2:	6979      	ldr	r1, [r7, #20]
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <writeTime+0x68>)
 80006b6:	fba3 2301 	umull	r2, r3, r3, r1
 80006ba:	08da      	lsrs	r2, r3, #3
 80006bc:	4613      	mov	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	1aca      	subs	r2, r1, r3
 80006c6:	60fa      	str	r2, [r7, #12]
		intValue /= 10;
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <writeTime+0x68>)
 80006cc:	fba2 2303 	umull	r2, r3, r2, r3
 80006d0:	08db      	lsrs	r3, r3, #3
 80006d2:	617b      	str	r3, [r7, #20]

		writeLCD(value + '0');
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3330      	adds	r3, #48	; 0x30
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff17 	bl	800050c <writeLCD>
	for(int i = 0; i <= 4;i++)
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	3301      	adds	r3, #1
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	dde3      	ble.n	80006b2 <writeTime+0x22>
	}

	instructLCD(0x06);	// set right shift
 80006ea:	2006      	movs	r0, #6
 80006ec:	f7ff ff5a 	bl	80005a4 <instructLCD>
}
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	cccccccd 	.word	0xcccccccd

080006fc <TIM3_IRQHandler>:
extern unsigned int monitoringOn;

/* Private function prototypes */
/* Private functions */
void TIM3_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	TIM3->SR &= ~BIT0; // update interupt flag to 0
 8000700:	4a11      	ldr	r2, [pc, #68]	; (8000748 <TIM3_IRQHandler+0x4c>)
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <TIM3_IRQHandler+0x4c>)
 8000704:	8a1b      	ldrh	r3, [r3, #16]
 8000706:	b29b      	uxth	r3, r3
 8000708:	f023 0301 	bic.w	r3, r3, #1
 800070c:	b29b      	uxth	r3, r3
 800070e:	8213      	strh	r3, [r2, #16]
	if (monitoringOn){GPIOD->ODR &= ~BIT12;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <TIM3_IRQHandler+0x50>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00b      	beq.n	8000730 <TIM3_IRQHandler+0x34>
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <TIM3_IRQHandler+0x54>)
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <TIM3_IRQHandler+0x54>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000722:	6153      	str	r3, [r2, #20]
//	  GPIOD->ODR &= ~BIT13;
	  GPIOD->ODR |= BIT14;}
 8000724:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <TIM3_IRQHandler+0x54>)
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <TIM3_IRQHandler+0x54>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6153      	str	r3, [r2, #20]
	interruptCount++;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <TIM3_IRQHandler+0x58>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	4a07      	ldr	r2, [pc, #28]	; (8000754 <TIM3_IRQHandler+0x58>)
 8000738:	6013      	str	r3, [r2, #0]
	BoucleDAttente(2000);
 800073a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800073e:	f000 f9d9 	bl	8000af4 <BoucleDAttente>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40000400 	.word	0x40000400
 800074c:	20000038 	.word	0x20000038
 8000750:	40020c00 	.word	0x40020c00
 8000754:	20000034 	.word	0x20000034

08000758 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~BIT0; // update interrupt flag to 0
 800075c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000764:	8a1b      	ldrh	r3, [r3, #16]
 8000766:	b29b      	uxth	r3, r3
 8000768:	f023 0301 	bic.w	r3, r3, #1
 800076c:	b29b      	uxth	r3, r3
 800076e:	8213      	strh	r3, [r2, #16]
	waitCount = 1;
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <TIM2_IRQHandler+0x28>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	20000050 	.word	0x20000050

08000784 <UART4_IRQHandler>:

void UART4_IRQHandler(void){
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
	uint8_t data = UART4->DR;
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <UART4_IRQHandler+0x74>)
 800078c:	889b      	ldrh	r3, [r3, #4]
 800078e:	b29b      	uxth	r3, r3
 8000790:	71fb      	strb	r3, [r7, #7]
	if(monitoringOn){GPIOD->ODR &= ~BIT12;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <UART4_IRQHandler+0x78>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d011      	beq.n	80007be <UART4_IRQHandler+0x3a>
 800079a:	4a19      	ldr	r2, [pc, #100]	; (8000800 <UART4_IRQHandler+0x7c>)
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <UART4_IRQHandler+0x7c>)
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007a4:	6153      	str	r3, [r2, #20]
	  GPIOD->ODR ^= BIT13;
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <UART4_IRQHandler+0x7c>)
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <UART4_IRQHandler+0x7c>)
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80007b0:	6153      	str	r3, [r2, #20]
	  GPIOD->ODR &= ~BIT14;}
 80007b2:	4a13      	ldr	r2, [pc, #76]	; (8000800 <UART4_IRQHandler+0x7c>)
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <UART4_IRQHandler+0x7c>)
 80007b6:	695b      	ldr	r3, [r3, #20]
 80007b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007bc:	6153      	str	r3, [r2, #20]
	buffer[ptr_write] = data;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <UART4_IRQHandler+0x80>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4911      	ldr	r1, [pc, #68]	; (8000808 <UART4_IRQHandler+0x84>)
 80007c4:	79fa      	ldrb	r2, [r7, #7]
 80007c6:	54ca      	strb	r2, [r1, r3]
	ptr_write++;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <UART4_IRQHandler+0x80>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <UART4_IRQHandler+0x80>)
 80007d0:	6013      	str	r3, [r2, #0]
	if(ptr_write>=20) ptr_write = 0;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <UART4_IRQHandler+0x80>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b13      	cmp	r3, #19
 80007d8:	dd02      	ble.n	80007e0 <UART4_IRQHandler+0x5c>
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <UART4_IRQHandler+0x80>)
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
	bytesToRead++;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <UART4_IRQHandler+0x88>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <UART4_IRQHandler+0x88>)
 80007e8:	6013      	str	r3, [r2, #0]
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40004c00 	.word	0x40004c00
 80007fc:	20000038 	.word	0x20000038
 8000800:	40020c00 	.word	0x40020c00
 8000804:	20000020 	.word	0x20000020
 8000808:	2000003c 	.word	0x2000003c
 800080c:	20000028 	.word	0x20000028

08000810 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
  int i = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
  */

  /* TODO - Add your application code here */


  configureUART();
 800081a:	f000 f9a9 	bl	8000b70 <configureUART>
  configureLcdGPIO();
 800081e:	f7ff fdf5 	bl	800040c <configureLcdGPIO>
  configureLCD();
 8000822:	f7ff ff05 	bl	8000630 <configureLCD>
  setupMonitoring();
 8000826:	f000 f981 	bl	8000b2c <setupMonitoring>
  // config Led
   RCC->AHB1ENR |= BIT3;
 800082a:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <main+0xb0>)
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <main+0xb0>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
   GPIOD->MODER |= BIT30; // set mode de input output
 8000836:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <main+0xb4>)
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <main+0xb4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000840:	6013      	str	r3, [r2, #0]
   GPIOD->MODER &= ~BIT31;
 8000842:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <main+0xb4>)
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <main+0xb4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800084c:	6013      	str	r3, [r2, #0]
  configureTIM3(1000);
 800084e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80008c8 <main+0xb8>
 8000852:	f7ff fd73 	bl	800033c <configureTIM3>


  /* Infinite loop */
  while (1)
  {
	  i++;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3301      	adds	r3, #1
 800085a:	607b      	str	r3, [r7, #4]
	  if(monitoringOn)
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <main+0xbc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00b      	beq.n	800087c <main+0x6c>
	  {
		  GPIOD->ODR |= BIT12;
 8000864:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <main+0xb4>)
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <main+0xb4>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800086e:	6153      	str	r3, [r2, #20]
//		  GPIOD->ODR &= ~BIT13;
		  GPIOD->ODR &= ~BIT14;
 8000870:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <main+0xb4>)
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <main+0xb4>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800087a:	6153      	str	r3, [r2, #20]
	  }

	  if(interruptCount >= COUNTCOMPARE)
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <main+0xc0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000884:	d30a      	bcc.n	800089c <main+0x8c>
	  {
		  interruptCount = 0;
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <main+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
		  writeTime(currentTime++);
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <main+0xc4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	4910      	ldr	r1, [pc, #64]	; (80008d4 <main+0xc4>)
 8000894:	600a      	str	r2, [r1, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fefa 	bl	8000690 <writeTime>
	  }
	  if (bytesToRead >= 3)
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <main+0xc8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	dd02      	ble.n	80008aa <main+0x9a>
		  readCommand(buffer);
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <main+0xcc>)
 80008a6:	f7ff fc8f 	bl	80001c8 <readCommand>

	  if(monitoringOn)
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <main+0xbc>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0d1      	beq.n	8000856 <main+0x46>
	  {
		  GPIOD->ODR &= ~BIT12;
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <main+0xb4>)
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <main+0xb4>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008bc:	6153      	str	r3, [r2, #20]
	  i++;
 80008be:	e7ca      	b.n	8000856 <main+0x46>
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	447a0000 	.word	0x447a0000
 80008cc:	20000038 	.word	0x20000038
 80008d0:	20000034 	.word	0x20000034
 80008d4:	20000030 	.word	0x20000030
 80008d8:	20000028 	.word	0x20000028
 80008dc:	2000003c 	.word	0x2000003c

080008e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000918 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008e6:	e003      	b.n	80008f0 <LoopCopyDataInit>

080008e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008ee:	3104      	adds	r1, #4

080008f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008f8:	d3f6      	bcc.n	80008e8 <CopyDataInit>
  ldr  r2, =_sbss
 80008fa:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008fc:	e002      	b.n	8000904 <LoopFillZerobss>

080008fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000900:	f842 3b04 	str.w	r3, [r2], #4

08000904 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000906:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000908:	d3f9      	bcc.n	80008fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800090a:	f000 f841 	bl	8000990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090e:	f000 f9a7 	bl	8000c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000912:	f7ff ff7d 	bl	8000810 <main>
  bx  lr    
 8000916:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000918:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800091c:	08000cc8 	.word	0x08000cc8
  ldr  r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000924:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000928:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 800092c:	20000054 	.word	0x20000054

08000930 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC_IRQHandler>

08000932 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000944:	e7fe      	b.n	8000944 <HardFault_Handler+0x4>

08000946 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800094a:	e7fe      	b.n	800094a <MemManage_Handler+0x4>

0800094c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000950:	e7fe      	b.n	8000950 <BusFault_Handler+0x4>

08000952 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000956:	e7fe      	b.n	8000956 <UsageFault_Handler+0x4>

08000958 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4a16      	ldr	r2, [pc, #88]	; (80009f0 <SystemInit+0x60>)
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <SystemInit+0x60>)
 8000998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009a4:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <SystemInit+0x64>)
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <SystemInit+0x64>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <SystemInit+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <SystemInit+0x64>)
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <SystemInit+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <SystemInit+0x64>)
 80009c8:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <SystemInit+0x68>)
 80009ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009cc:	4a09      	ldr	r2, [pc, #36]	; (80009f4 <SystemInit+0x64>)
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <SystemInit+0x64>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <SystemInit+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80009de:	f000 f80d 	bl	80009fc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009e2:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <SystemInit+0x60>)
 80009e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009e8:	609a      	str	r2, [r3, #8]
#endif
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00
 80009f4:	40023800 	.word	0x40023800
 80009f8:	24003010 	.word	0x24003010

080009fc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000a0a:	4a36      	ldr	r2, [pc, #216]	; (8000ae4 <SetSysClock+0xe8>)
 8000a0c:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <SetSysClock+0xe8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a14:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <SetSysClock+0xe8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3301      	adds	r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d103      	bne.n	8000a34 <SetSysClock+0x38>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a32:	d1f0      	bne.n	8000a16 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <SetSysClock+0xe8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000a40:	2301      	movs	r3, #1
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	e001      	b.n	8000a4a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d142      	bne.n	8000ad6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a50:	4a24      	ldr	r2, [pc, #144]	; (8000ae4 <SetSysClock+0xe8>)
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <SetSysClock+0xe8>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000a5c:	4a22      	ldr	r2, [pc, #136]	; (8000ae8 <SetSysClock+0xec>)
 8000a5e:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <SetSysClock+0xec>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a66:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000a68:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <SetSysClock+0xe8>)
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <SetSysClock+0xe8>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000a70:	4a1c      	ldr	r2, [pc, #112]	; (8000ae4 <SetSysClock+0xe8>)
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <SetSysClock+0xe8>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a7a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000a7c:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <SetSysClock+0xe8>)
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <SetSysClock+0xe8>)
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000a86:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <SetSysClock+0xe8>)
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <SetSysClock+0xf0>)
 8000a8c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <SetSysClock+0xe8>)
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <SetSysClock+0xe8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a98:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000a9a:	bf00      	nop
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <SetSysClock+0xe8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0f9      	beq.n	8000a9c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <SetSysClock+0xf4>)
 8000aaa:	f240 7205 	movw	r2, #1797	; 0x705
 8000aae:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <SetSysClock+0xe8>)
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <SetSysClock+0xe8>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f023 0303 	bic.w	r3, r3, #3
 8000aba:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000abc:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <SetSysClock+0xe8>)
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <SetSysClock+0xe8>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000ac8:	bf00      	nop
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SetSysClock+0xe8>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f003 030c 	and.w	r3, r3, #12
 8000ad2:	2b08      	cmp	r3, #8
 8000ad4:	d1f9      	bne.n	8000aca <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000
 8000aec:	07405419 	.word	0x07405419
 8000af0:	40023c00 	.word	0x40023c00

08000af4 <BoucleDAttente>:

	TIM2->CR1 |= BIT0;																// clock start
}

void BoucleDAttente(short Nombre_microseconde_Dattente)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
	volatile unsigned int keepWaiting = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
//		waitCount = 0;
//	}
//	while(waitCount <= Nombre_microseconde_Dattente){keepWaiting++;}
//	waitCount = 0;

	for(unsigned int N = 0; N < Nombre_microseconde_Dattente; N++){keepWaiting++;}
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	e005      	b.n	8000b14 <BoucleDAttente+0x20>
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3301      	adds	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d8f4      	bhi.n	8000b08 <BoucleDAttente+0x14>

}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <setupMonitoring>:

void setupMonitoring(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	  // configure les LEDs
	  RCC->AHB1ENR |= BIT3;
 8000b30:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <setupMonitoring+0x38>)
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <setupMonitoring+0x38>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
	  GPIOD->MODER |= (BIT24 | BIT26 | BIT28); // set mode de input output
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <setupMonitoring+0x3c>)
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <setupMonitoring+0x3c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f043 53a8 	orr.w	r3, r3, #352321536	; 0x15000000
 8000b46:	6013      	str	r3, [r2, #0]
	  GPIOD->MODER &= ~(BIT25 | BIT27 | BIT29);
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <setupMonitoring+0x3c>)
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <setupMonitoring+0x3c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f023 5328 	bic.w	r3, r3, #704643072	; 0x2a000000
 8000b52:	6013      	str	r3, [r2, #0]

	  monitoringOn = 1;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <setupMonitoring+0x40>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	20000038 	.word	0x20000038

08000b70 <configureUART>:


#include <uart.h>

void configureUART(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	//PA.0 USART4_TX
	//PA.1 USART4.RX

	RCC->AHB1ENR |=  BIT0; //Give clock to GPIOA
 8000b74:	4a36      	ldr	r2, [pc, #216]	; (8000c50 <configureUART+0xe0>)
 8000b76:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <configureUART+0xe0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~BIT0; //  pin 0Alternate function mode
 8000b80:	4a34      	ldr	r2, [pc, #208]	; (8000c54 <configureUART+0xe4>)
 8000b82:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <configureUART+0xe4>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f023 0301 	bic.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= BIT1;
 8000b8c:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <configureUART+0xe4>)
 8000b8e:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <configureUART+0xe4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~BIT2; //  pin1 Alternate function mode
 8000b98:	4a2e      	ldr	r2, [pc, #184]	; (8000c54 <configureUART+0xe4>)
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <configureUART+0xe4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f023 0304 	bic.w	r3, r3, #4
 8000ba2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= BIT3;
 8000ba4:	4a2b      	ldr	r2, [pc, #172]	; (8000c54 <configureUART+0xe4>)
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <configureUART+0xe4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] = BIT3 | BIT7; // Activate the alternate function 8
 8000bb0:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <configureUART+0xe4>)
 8000bb2:	2288      	movs	r2, #136	; 0x88
 8000bb4:	621a      	str	r2, [r3, #32]

	RCC ->APB1ENR |=  BIT19; //Give clock to USART4
 8000bb6:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <configureUART+0xe0>)
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <configureUART+0xe0>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40

	UART4->CR1 |= BIT13; //USART enable
 8000bc2:	4a25      	ldr	r2, [pc, #148]	; (8000c58 <configureUART+0xe8>)
 8000bc4:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <configureUART+0xe8>)
 8000bc6:	899b      	ldrh	r3, [r3, #12]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	8193      	strh	r3, [r2, #12]

	UART4->CR1 &= ~BIT12; // 8 data bits
 8000bd2:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <configureUART+0xe8>)
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <configureUART+0xe8>)
 8000bd6:	899b      	ldrh	r3, [r3, #12]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	8193      	strh	r3, [r2, #12]

	UART4->CR1 |= BIT10; // parity control enable
 8000be2:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <configureUART+0xe8>)
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <configureUART+0xe8>)
 8000be6:	899b      	ldrh	r3, [r3, #12]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	8193      	strh	r3, [r2, #12]

	UART4->CR1 &= ~BIT9; // parrity even
 8000bf2:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <configureUART+0xe8>)
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <configureUART+0xe8>)
 8000bf6:	899b      	ldrh	r3, [r3, #12]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	8193      	strh	r3, [r2, #12]

	UART4->CR1 |= BIT3 | BIT2; // receiver and transmitter enable
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <configureUART+0xe8>)
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <configureUART+0xe8>)
 8000c06:	899b      	ldrh	r3, [r3, #12]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	f043 030c 	orr.w	r3, r3, #12
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	8193      	strh	r3, [r2, #12]

	UART4->CR1 |= BIT5; // enable interuption at RXNE (RXNEIE)
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <configureUART+0xe8>)
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <configureUART+0xe8>)
 8000c16:	899b      	ldrh	r3, [r3, #12]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	f043 0320 	orr.w	r3, r3, #32
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	8193      	strh	r3, [r2, #12]

	UART4->CR2 &= ~(BIT12 | BIT13); // 1 stop bit
 8000c22:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <configureUART+0xe8>)
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <configureUART+0xe8>)
 8000c26:	8a1b      	ldrh	r3, [r3, #16]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	8213      	strh	r3, [r2, #16]

	UART4->BRR = (unsigned int)(43.75 * 16); //par calcul scientifique de baud = Fclk/(8*(2-over8)*USARTDIV)
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <configureUART+0xe8>)
 8000c34:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000c38:	811a      	strh	r2, [r3, #8]

	NVIC->ISER[1] |= BIT20; // position 52 iteruption UART4
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <configureUART+0xec>)
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <configureUART+0xec>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c44:	6053      	str	r3, [r2, #4]

}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40004c00 	.word	0x40004c00
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <__libc_init_array>:
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	4e0d      	ldr	r6, [pc, #52]	; (8000c98 <__libc_init_array+0x38>)
 8000c64:	4c0d      	ldr	r4, [pc, #52]	; (8000c9c <__libc_init_array+0x3c>)
 8000c66:	1ba4      	subs	r4, r4, r6
 8000c68:	10a4      	asrs	r4, r4, #2
 8000c6a:	2500      	movs	r5, #0
 8000c6c:	42a5      	cmp	r5, r4
 8000c6e:	d109      	bne.n	8000c84 <__libc_init_array+0x24>
 8000c70:	4e0b      	ldr	r6, [pc, #44]	; (8000ca0 <__libc_init_array+0x40>)
 8000c72:	4c0c      	ldr	r4, [pc, #48]	; (8000ca4 <__libc_init_array+0x44>)
 8000c74:	f000 f818 	bl	8000ca8 <_init>
 8000c78:	1ba4      	subs	r4, r4, r6
 8000c7a:	10a4      	asrs	r4, r4, #2
 8000c7c:	2500      	movs	r5, #0
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d105      	bne.n	8000c8e <__libc_init_array+0x2e>
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
 8000c84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c88:	4798      	blx	r3
 8000c8a:	3501      	adds	r5, #1
 8000c8c:	e7ee      	b.n	8000c6c <__libc_init_array+0xc>
 8000c8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c92:	4798      	blx	r3
 8000c94:	3501      	adds	r5, #1
 8000c96:	e7f2      	b.n	8000c7e <__libc_init_array+0x1e>
 8000c98:	08000cc0 	.word	0x08000cc0
 8000c9c:	08000cc0 	.word	0x08000cc0
 8000ca0:	08000cc0 	.word	0x08000cc0
 8000ca4:	08000cc4 	.word	0x08000cc4

08000ca8 <_init>:
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	bf00      	nop
 8000cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cae:	bc08      	pop	{r3}
 8000cb0:	469e      	mov	lr, r3
 8000cb2:	4770      	bx	lr

08000cb4 <_fini>:
 8000cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb6:	bf00      	nop
 8000cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cba:	bc08      	pop	{r3}
 8000cbc:	469e      	mov	lr, r3
 8000cbe:	4770      	bx	lr
